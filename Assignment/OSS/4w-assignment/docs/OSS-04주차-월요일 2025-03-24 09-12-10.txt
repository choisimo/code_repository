00:10 
안녕하세요. 네 일단 출석 부르고 시작할게요 민병훈 박찬영 어딨나요? 송민규 이병헌 최강님 최현솔 김담은 이번주부터는 출석에 반영이 됩니다. 김소운 네 배지혁 네 안태윤 유승현 어딨나요? 최지몬 네 최지혜 네 강건우 네 김우중 맞나요? 아 화장실 갔나요?

01:09 
 그러면은 혹시 영상 올린 거는 다 보셨나요? 구글 클래스룸에 가입이 안 됐다. 아니면 영상을 못 봤다. 내용 다 확인하셨죠. 그래서 이제 제가 코드 올려드린 거 가지고 여러분들이 뭐 제출하시면 돼요. 그래서 첫 번째는 좀 어렵지 않게 구성을 했으니까 여러분들이 그냥 그거 여러분들의 키 입력을 하시고 그리고 또 뭐 있었죠. 여러분들 이제 키 입력하시고 그 다음에 어떤 파일에 로직 부분에 이제 뭐 x는 뭐 y는 이제 뭐 이거 이제 채워 넣는 거 이것만 하시면 돼요. 그래서 제가 위에 부분은 로직을 다 짜놨으니까 거기 이제 문서 있잖아요. 문서를 참고를 하셔가지고, 여기 부분을 채우시면 됩니다.

02:05 
 이게 첫 번째고 두 번째 같은 경우에는 이제 기온을 이제 강수 확률이었네요. 강수확률 글로 변경을 하셔가지고, 이제 기존에 1번을 만드시면 빨간색으로 각 시도별로 색깔이 칠해져 있을 텐데 이거를 강수확률로 바꾸고 여기에다가 파란색으로 이렇게 색칠을 하면 된다. 그거를 이제 하시면 될 것 같아요. 그래서 뭐 크게 어렵진 않으니까 여러분들이 그냥 코드 돌려보시면서 해보시면 되고 이제 그냥 아웃풋 만드는 게 라우프 폴더에 이제 어떤 이제 csv 파일이 생성이 될 건데 이거 만드는 게 오래 걸리지 이거 로직 자체는 뭐 어렵지 않을 거라고 생각을 해요. 그래서 여러분들이 쉽게 하실 수 있을 거라고 저는 생각을 하고 있습니다. 그래서 이 실습은 수업 시간에 진행하는 실습은 그렇게 어렵지 않게 진행을 하려고 해요.

03:01 
 그래서 오늘 진행을 할 거는 무엇이냐면 앱을 이제 하나 만들어 보자 보자라는 겁니다. 네 그래서 앱을 만드는데 우리는 이제 웬만하면은 이제 웹앱을 이제 얘기를 하는 거고요. 그래서 웹앱이라고 하면은 결국에는 우리가 흔히들 이렇게 크게 구분을 하죠. 프론트 엔드하고 그다음에 백엔드 이렇게 아 구분을 이제 하고 있습니다. 그래서 우리가 지금 만들 어플리케이션에서는 데이터베이스는 따로 필요하지는 않으니까 데이터베이스 빼고 프론트 엔드 만들고 그리고 얘네들 사이의 연동을 어떻게 수행을 하는지 이거에 대해서 한번 알아보려고 해요.

03:48 
 그래서 어 여러 가지 뭐 어플리케이션이 될 수도 있겠지만, 제가 일단은 지도와 지도와 그리고 날씨 이거를 가지고 한번 해보려고 합니다. 그래서 지도 같은 경우에는 우리가 흔히들 가장 많이 쓰는 게 구글맵이라든지. 아니면은 네이버 지도라든지 아니면 카카오 지도라든지 이거를 많이 쓰게 되는데 사용 방법들은 다 비슷해요. 그냥 스크립트 파일에다가 지도 삽입을 하고요. 그래서 여기 지도에다가 뭔가 뜨게 되면 얘를 이제 돔 객체에서 접근을 할 수가 있죠.

04:31 
 그래서 이 돔 객체에서 접근을 해서 여기에다가 직접적으로 뭔가 이제 수정을 가한다거나 아니면은 요 화면 위에다가 어떤 레이어를 하나 씌워가지고 이 레이어를 통해서 지도를 약간 좀 변형하는 것처럼 보이게 만드는 그러한 작업들을 이제 수행을 해볼 거예요. 그래서 이런 것들은 지도를 사용자한테 직접 보여줘야 되기 때문에 프론트 엔드 쪽으로 볼 수가 있을 거예요. 그리고 이제 이 지도에서 어떤 작업들을 한다라고 했을 때 웬만한 로직들은 클라이언트단에서 해결을 할 수 있을 거예요. 그래서 이제 얘네들을 사용하면 장점이 뭐냐면은 이 지도 객체에 우리가 시간을 투자할 필요가 없다는 게 장점이죠. 예를 들면 우리가 이런 식으로 이제 지도가 있다라고 했을 때 지도를 그냥 가만히 두고 우리가 보기만 하는 건 아니잖아요. 여기서 이제 뭐 확대 축소라든지 아니면은 이제 뭐 상하 좌우 왔다 갔다 하면서 내가 원하는 타겟을 찾는 거잖아요.

05:30 
 그래서 이런 것들에 대해서 돔 객체로 접근을 해서 조작을 하는데 이런 api들을 사용하게 되면 우리가 편하게 객체를 개발할 수가 있다라는 겁니다. 다른 사람들이 다른 회사들이 만들어 놓은 이런 소프트웨어를 가져다가 그냥 사용만 하면 된다라고 보시면 될 것 같아요. 그래서 우리가 뭐 크게 시간을 들이지 않고도 이렇게 요새는 편하게 개발할 수 있는 시대가 되었다라는 겁니다. 하지만 약간의 기능의 차이는 있을 수 있어요. 그래서 우리나라 지도 같은 경우에는 네이버나 카카오가 좀 더 잘 되어 있는 편이기는 하고 그리고 지도에다가 뭔가 마킹을 표시를 한다든지 아니면 도형 같은 거 아니면 선 같은 거를 표시를 한다든지 이러한 기능들은 다양한 api들마다 차이가 있을 수 있습니다.

06:22 
 그래서 이것들은 원하는 어플리케이션에 맞게끔 선택을 하셔가지고, 개발을 진행을 하시면 되고요. 그래서 구글이든 네이버든 카카오든 다 이제 오픈 api api 형식을 갖추고는 있는데, 이 open api라고 하면 우리가 크게 두 가지를 기억을 해달라고 했어요. 그래서 하나는 엔드 포인트를 기억을 해둬야 돼요. 엔드포인트라고 하면 우리가 흔히들 얘기하는 요청 경로라고 보시면 될 것 같아요. 요청 경로라고 봐가지고 우리가 이 프론트에서도 어떻게 보면 레스테이피아를 호출한다. 이런 관점으로도 볼 수 있는데, 지도를 띄우는 것은 레스테이피아이가 아니죠. 얘 같은 경우에는 어떤 느낌이냐 라고 하면 레스테 api일 수도 있어요. 어떤 관점에서는 이 지도에 객체를 가져와가지고 객체라고 하면 html로 된 코드죠 그래서 이거를 특정한 주소에다가 요청을 합니다.

07:22 
 엔드포인트에다가 요청을 하는 거예요. 그러면은 각각의 클라우드 서버에서 우리 어플리케이션으로 특정한 코드 블록을 보내주는 거죠. 그러면 지도 객체에 대한 코드 스크립트랑 html 자바스크립트랑 그다음에 html 이런 것들을 보내줘가지고 우리 애플리케이션에다가 얘네를 삽입하는 구조다라고 보시면 될 것 같아요. 그다음에 알아둬야 될 거는 이제 키입니다. 키 그래서 얘네들 같은 경우에는 오픈소스 소프트웨어다라고 볼 수 있을까요? 어 이러한 서비스는 오픈소스라고 보기에는 이제 약간 애매한 감이 없지 않아 있어요. 하지만 우리가 얘네들을 그냥 쉽게 가져와서 사용을 할 수 있다라는 이제 장점들이 있는데, 결국에는 얘네들이 어떤 거를 하냐면은 얘네들의 객체를 이제 보내주면서 사용자가 요청을 하게 되는 거잖아요.

08:19 
 결국에는 이제 요청을 이제 하게 되는데 이 요청을 몇 번 할 때마다 비용을 지금 받게 되어 있어요. 그래서 어느 정도의 비용이 발생을 합니다. 물론 네이버 같은 경우에는 뭐 이따가 한번 보시면 알겠지만, 6만 번인가 까지가 무료로 되어 있어요. 그래서 우리가 그냥 무료로 사용할 수 있는 크레딧이 정해져 있기는 한데 어느 정도 일정 호출 수준이 벗어나 버리면 비용을 많이 지불을 해야 된다는 단점들이 있죠. 그래서 이러한 클라우드 서비스들에서 어떤 걸 하냐면 사용자마다 개인 키를 발급을 해줘가지고 클라이언트의 키를 가지고 호출을 하게끔 되어 있어요.

09:03 
 그러면 호출 횟수를 기록을 해뒀다가 너는 한 달에 6만 번 썼으니까 무료다 아니면 너는 한 달에 10만 번 썼으니까 초과분인 4만 번에 대해서 어느 정도의 비용을 내라 이런 식으로 산출을 하게 되는 거죠. 그래서 open api 같은 경우에는 우리가 무료로 사용할 수 있는 것도 많기는 하지만 결국에는 유료로 이제 사용할 수 있는 것들이 많고 무료라고 하더라도 이 서버 쪽에서 과도한 트래픽이 발생하지 않도록 어느 정도 사용자의 사용량을 좀 제한하는 면들이 없지 않아 있습니다. 그래서 우리가 open api를 사용한다고 했을 때에는 크게 두 가지 엔드 포인트를 활용해서 이 api를 요청하기 위한 주소를 반드시 알아야겠고요. 그리고 내 키를 넣어가지고 이제 요청을 같이 보내야 된다. 안 그러면 인증 실패 에러가 발생을 하게 됩니다.

10:02 
 그래서 이 개인키 같은 경우에는 발급하는 방법들이 되게 여러 가지가 있어요. 어떤 서비스 같은 경우에는 이 개인키를 발급하기 위해서 st api를 한번 날려줘야 되는 그런 서비스들도 있고요. 아니면은 이런 대기업들 같은 경우에는 자사 홈페이지 개발자 페이지에 들어가가지고 가입하는 경우들이 꽤 있습니다. 그래서 예를 들어서 네이버 앤 클라우드였나 클라우드 플랫폼 여기 이제 들어가 보시면은 여기에 이제 회원 가입을 하셔가지고, 이제 여러분들이 api를 사용을 하실 수 있습니다. 그래서 로그인도 이렇게 편하게 할 수 있게끔 되어 있는데, 이거는 이따가 한번 같이 봐보도록 할게요 그래서 다양한 서비스들이 있습니다. 서비스들이 엄청 많이 존재하고 디지털 트윈 같은 것도 생겼네요.

10:59 
 그래서 스토리지라든지 아니면 계산 서버 컨테이너 이런 것들도 있고 아니면 여러 솔루션들도 제공을 해줘가지고 여기에 이제 ai 서비스 내에 이제 지도 서비스가 있더라구요. 그래서 뭔가 좀 많이 바뀌었다. 싶긴 했는데 되게 다양한 서비스들을 제공을 해주고 있습니다. 그래서 여러분들이 이런 것들을 사용을 하시려면 특정한 이제 페이지에 들어가서 가입을 하셔야 된다라는 거 일단은 기억을 하시면 될 것 같아요. 그래서 이따가 한번 같이 가입도 해보고 키 발급받아서 이제 어떻게 화면에 띄우는지 그런 부분들 한번 같이 알아보도록 합시다. 자 그러면은 오늘 이 시간에는 어떤 내용들을 조금 다뤄볼까 하냐면은 결국에는 여러분들이 어플리케이션을 개발하면서 처음에 어떻게 시작을 해야 될지 잘 모른다 라는 게 가장 많이 고민이 될 거예요. 그래서 그런 시작 부분을 어떻게 할 수 있을까?

11:53 
 라는 거를 이제 조금 같이 한번 보려고 합니다. 그래서 앱을 개발하기로 했어요. 앱개발을 라고 이제 생각을 했다라고 합시다. 그러면은 여러분들이 맨 처음 하는 게 뭘까요? 나는 이제 뭔가 앱 개발을 해야겠어 라고 이제 뭐 포트폴리오든 아니면은 내가 뭔가 앱 개발이 갑자기 하고 싶어져 가지고 앱 개발을 하자 뭐 이런 경우는 이제 뭐 거의 없잖아요. 그래서 대부분 포트폴리오를 위해서든 아니면 본인이 어떠한 서비스에 대한 필요성을 느껴가지고 개발을 하는 경우들이 많죠 그래서 만약에 여러분들이 포트폴리오를 위해서 개발을 한다라고 했을 때 가장 먼저 해야 될 거는 주제를 찾는 게 가장 먼저 선행이 되어야 될 거예요. 그래서 여러분들이 이렇게 생활을 하다가 갑자기 내가 이런 점은 좀 불편한데 어떤 거 어떤 서비스가 좀 있었으면 좋겠다.

12:51 
 이런 식으로 이제 하나의 주제를 이제 생각을 하시게 될 거예요. 그래서 뭔가 개발을 한다라고 했을 때 여러분들이 가장 먼저 떠올려야 될 거 이제 어떠한 어플리케이션을 개발해야 될까 주제를 먼저 선정을 하셔야 된다는 겁니다. 그래서 이 수업에서는 제가 주제를 다 던져드리기 때문에 뭔가 크게 고민하실 것들은 없기는 하지만 여러분들이 이런 주제를 고민하는 연습들을 해보셨으면 좋겠어요. 그래서 뭐 나중에 회사를 가서든 아니면은 여러분들이 기획을 할 수도 있게 되는 거고, 아니면은 뭐 여러분들이 대학원에 가시든 어디를 가시든 이제 새로운 아이디어를 가지고 새롭게 기획을 하실 일들이 있을 거예요. 그런 것들을 좀 대비하기 위해서 하나의 주제를 생각하는 방법들에 대해서 많이 고민을 해보시면은 좋을 것 같아요. 이런 것들을 좀 쉽게 할 수 있는 방법들이 어떤 게 있냐라고 하면은 저는 해커톤이 하나의 방법이 될 수 있다라고 생각을 해요.

13:47 
 물론 해커톤들 웬만한 대회들 같은 경우에는 주제를 던져주는 경우들이 좀 많이 있어요. 근데 세부적인 주제라기보다는 예를 들어서 의료 해커톤 아니면 공공 서비스 해커톤 이런 식으로 큰 주제를 던져주고 그 안에서 여러분들이 세부적인 주제를 잡아가는 것들을 많이 수행을 하실 텐데 이런 고민들 서비스에 대한 고민들을 한 번씩 해보시면 좋을 것 같아요. 그래서 저 같은 경우에도 언제였지 학부 때였나 석사 때였나 기억이 잘 안 나는데 무슨 이제 뭐 티머니에서 어떤 해커톤을 열어가지고 이제 기술 아이디어 제안을 하고 그걸로 직접 해커톤까지 개발을 하는 그러한 대회에 참가를 한 적이 있었는데, 주제는 그거였어요. 사회적 약자가 주제였습니다.

14:37 
 사회적 약자가 이제 뭐 주제였다라고 이제 하면은 사실 사회적 약자를 대상으로 해서 어떠한 이제 서비스들을 티머니를 활용을 해서 개발을 할 수 있을까라고 이제 생각을 해보면은 좀 많이 그때는 고민이 됐었어요. 그러니까 사실 티머니라고 하면은 그냥 이제 우리가 대중교통이라고 생각을 하는데 어떻게 보면 그 티머니가 데이터가 어떻게 오가기도 하고 그다음에 서비스가 어떻게 구성되는지 전반적으로 우리가 이해가 잘 안 되잖아요. 어떻게 보면 예를 들어서 여러분들이 버스 이거 카드 찍는 데에다가 카드를 찍으면은 이 데이터가 어디로 날라가 가지고 뭐 어디에 이제 통신이 돼서 저장이 될 텐데 이러한 이제 플로우를 잘 모르기도 하고 그다음에 어떤 api가 있는지도 잘 모르기도 하고 이런 고민들이 되게 많았단 말이에요. 그래서 이런 새 기술적으로 세부적인 내용을 찾기에는 뭔가 좀 어려운 부분들이 많아요.

15:30 
 그래서 가장 먼저 했던 게 무엇이냐라고 하면은 그러면은 다른 거는 다 제쳐두고 사회적 약자를 위해서 어떠한 서비스를 개발을 해볼까 요거를 제일 먼저 고민을 했던 것 같아요. 그래서 어떤 서비스를 개발을 했는지 정확히 잘 기억은 안 나는데 이제 노인분들의 환승을 좀 빠르게 도와주기 위한 어플리케이션 개발 뭐 이런 거를 했던 것 같아요. 그래서 이제 고런 거를 가지고 이제 뭐 대회도 하고 나중에 찾아보니까 요런 거 이제 api도 다 제공을 해주더라구요. 그래서 요런 걸 가지고 이제 환승 지점을 어떻게 좀 빠르게 찾아낼 수 있을까? 뭐 이런 것도 이제 했던 기억들이 있는데, 결국에는 제가 말씀드리고 싶었던 거는 여러분들이 어떤 앱을 개발한다. 서비스를 개발한다라고 했을 때 가장 먼저 주제에 대해서 고민하는 연습을 해보셨으면 좋겠다. 그걸 위해서 다양한 대회들 아이디어 경진대회 같은 것도 괜찮아요.

16:28 
 그런 데에는 이제 글로 써가지고 이제 제출을 해야 되는 경우들이 좀 있는데, 그러면서 여러분들의 생각을 좀 정리를 하실 수 있는 기회가 되지 않을까 싶습니다. 그래서 이런 것들은 대부분 제출을 할 때 글로 이제 작성을 하거나 대부분 이제 뭐 기획서 같은 거를 작성하라 그러죠 그래서 여러분들이 그 뭐죠 캡스톤도 괜찮아요. 캡스톤 같은 경우에도 이제 다시 캡스톤은 주제가 나오고 그 주제에 기획서가 이렇게 다 작성이 돼서 이렇게 나오는 편이긴 하잖아요. 여러분들이 여러분들의 방식대로 그런 기획을 한번 해보시면 좋을 것 같아요. 여러분들이 기획자라고 하면은 사실 그냥 큰 그림만 그리면 돼요.

17:10 
 예를 들어서 사회적 약자를 위한 어떤 서비스를 개발을 한다 라고 했을 때 사회적 약자를 위해서 어떤 서비스가 필요하고 어떤 것들을 이제 개발을 하고 어떤 기능들이 있고 이걸 통해서 얻을 수 있는 이점들은 무엇인가 이런 식으로 이제 작성을 하면 되는데 여러분들이 이제 개발자로서 어 이 수업을 듣고 계신 거잖아요. 예 그러면은 어떤 식으로 이제 생각을 하셔야 되냐면은 뭐 이런 것들은 그냥 기본으로 들어가는 거구요. 그래서 뭐 예를 들어서 뭐 개요라든지 개요라던지 아니면은 뭐 개발 내용 내용 뭐 장점 뭐 이런 것들은 뭐 그냥 기본적으로 들어간다라고 생각을 하시고 어 우리가 개발자로서 작성해야 되는 기획서에는 어떤 내용들이 들어가야 되냐 라고 하면은 무조건 들어가야 될 게 제가 웹 서비스 구조도가 들어가야 됩니다. 서비스 구조도 가 들어가야 돼요.

18:03 
 이게 무슨 소리냐 라고 하면은 서비스 구조도 우리가 그냥 사실 뭐 10년 전만 하더라도 그냥 우리가 웹페이지를 만든다 라고 하면은 하나의 웹페이지를 만들어 가지고 이 웹페이지에서 db도 직접 접근을 하고 이 웹페이지에서 트래픽 to 알아서 정리를 하고 이런 걸 다 했단 말이에요. 그런데 요새는 이런 것들이 다 세분화되어 있어요. 프론트 엔드 나눠져 있고요. 백엔드 나눠져 있고요. db 나눠져 있고요. 이거를 감싸는 뭐 이거 갭 배포 환경 이렇게 또 나누기도 하고요. 이거를 뭐 배포 자동화도 이제 자동으로 하고 테스트 환경도 자동으로 구축도 하고 뭐 이런 식으로 어 되게 다양하게 구성을 하는 경우들이 꽤 있습니다. 하지만 어 그러다 보니까 점점 더 이제 서비스가 복잡해지는 거예요.

18:54 
 그래서 내가 어떤 거를 개발을 하느냐라고 하면은 주제를 먼저 정하고 난 다음에 바로 어떤 서비스를 개발할 거다 그러면은 그런 구조를 잡는 연습을 하시면은 좋을 것 같다라는 거예요. 그래서 전반적으로 내가 그냥 프론트 엔드 백엔드 어떤 기술 스택을 사용할지는 모르겠지만, 일단은 프론트 엔드 이렇게 구성을 해서 여기에 들어갈 기능들 무엇 그다음에 백엔드 이렇게 구성을 해서 백엔드에 들어갈 기능은 무엇 그리고 이 왔다 갔다 하는 통신 프로토콜은 어떤 거를 사용을 하겠다. 등등 되게 다양하게 서비스 구조들을 넣을 수가 있습니다. 그래서 여러분들이 주제는 아마 수요일이나 다음주쯤 정할 것 같은데, 중간 발표가 있죠. 중간 발표 때 이 서비스 구조도를 무조건 이제 보여주셔야 돼요.

19:42 
 그래서 이 서비스 구조도를 가지고 여러분들이 내가 이런 서비스를 개발하려는데 이렇게 구성이 되어 있고 그러면 특히나 프론트 엔드 백엔드 이쪽에서는 어떠한 기능들을 수행을 하겠다. 이런 식으로 간략하게 보여주시면 과연 이 사람은 이 팀은 어떻게 서비스를 개발을 하겠다. 이런 것들을 파악을 할 수가 있겠다라는 거죠. 그래서 여러분들이 이거 이제 한번 보시면 될 것 같고, 그 다음에 이제 선택을 이제 하셔야 될 게 구조를 이제 선택을 했어요. 그러면은 이제 바로 개발을 들어가느냐 뭐 그건 아니죠. 여기서 이제 고려를 해야 될 사항이 이제 기술 스택을 선정을 하셔야 된다라는 겁니다. 그래서 대충 이때쯤까지 오게 되면은 어떠한 서비스를 개발을 하고 서비스 구조를 이제 파악을 하고 여기까지 왔으면 대충 어떤 서비스를 어떻게 개발을 하겠다. 정도는 윤곽이 나와 있을 거예요.

20:41 
 그래서 뭐 이니셜 타겟은 몇 명 그리고 이 트래픽은 어느 정도 발생을 하고 통신 속도가 중요하냐? 아니면 db의 완결성이 중요하냐? 이런 부분들 여러분들이 개개인이 다 판단을 할 수 있는 능력을 가졌을 거예요. 그래서 구조까지 완성이 되면 그러한 부분들을 기반으로 해서 여러분들이 하나하나 기술 스택을 결정을 하면 된다라는 겁니다. 그래서 어 이러시는 분들이 약간 있어요. 만약에 개발을 한다고 했을 때 아 나는 그러면은 그냥 어 뭐 뷰나 아니면은 뭐 스프링부트 같은 걸로 일단은 개발을 시작해 봐야겠다라고 하고서 주제를 정하는 경우들이 있는데, 뭐 이렇게 해도 크게는 상관은 없는데 어 약간 일반적인 경우는 아니에요.

21:21 
 그러니까 여러분들이 뭐 뷰나 스프링을 어느 정도 이제 처음 시작하는 단계에서는 뭐 이런 서비스를 바로 개발을 하면서 공부를 하는 것도 어느 정도 저는 괜찮다라고 생각을 하는데 나중에 이제 서비스를 개발할 때에는 만약에 여러분들이 취업을 하시거나 어느 정도의 실력을 쌓았다라고 하면은 기술 스펙 선정은 거의 마지막으로, 빼시는 게 좋아요. 이게 왜냐하면, 사실 여러분들이 하나의 프레임워크를 잘 배워두면 다른 프레임워크 배우는 거 그렇게 크게 어렵진 않을 거거든요. 그래서 기본적으로 만약에 여러분들이 프론트 핸드 개발자를 만약에 희망을 하신다고 이제 하시면 둘 중 하나를 배워두시면 좋아요. 리액트 또는 이제 뷰 둘 중 하나를 이제 배워두시면은 좋다라고 저는 생각을 합니다.

22:10 
 그리고 만약에 여러분들이 어 좀 이제 취업 시장을 넓게 보고 싶다 라고 하시면은 이제 리액트를 이제 좀 본격적으로 공부를 하시면 되고 아니다. 나는 이제 처음 시작하는 단계니까 뭔가 좀 웹 서비스를 어떻게 구현하는지에 대해서 배우고 싶다라고 하면 그냥 이제 뷰 같은 거를 먼저 배우셔도 상관은 없어요. 난이도 자체는 리액트가 훨씬 어렵고 뷰가 좀 쉽습니다. 전반적으로 여러분들이 htm sss 자바스크립트 이런 것들을 알고 있다라는 가정 하에 뷰 같은 경우에는 구현하는 방식이 되게 쉬워요 그래서 이따가도 이제 뷰로 샘플을 이제 같이 한번 만들어 볼 건데 그렇게 만드는 이유가 뭐냐라고 하면은 이 문법이 그렇게 크게 어렵지 않기 때문에 문법을 배제하고 서비스를 어떻게 구현하는지 보여드리기 위해서 이렇게 개발을 한다라고 이제 보시면 될 것 같아요.

23:09 
 그리고 만약에 여러분들이 이제 백엔드를 좀 희망을 하신다 라고 이제 하시면은 시작 자체는 이제 노드 제이에스 기반의 이제 익스프레스나 아니면 스프링 같은 거 많이들 사용을 하시죠. 자바 같은 걸로 이제 많이 사용을 하시고 자바 또는 요새는 코틀린도 많이 사용하는 것 같더라구요. 뭐 이런 것들을 이제 많이 사용을 하시고 만약에 여러분들이 ai 쪽을 좀 더 이제 어 배우고 싶다라고 하시면은 요새는 에메롭스라고도 이제 많이 채용 시장에서 많이 뽑는 것 같더라고요. 그러니까 머신러닝을 하는 개발자라고 해가지고 이게 ai 서비스 개발을 포함하는 게 아니라 ai 서비스들이 있는 거를 가지고 배포를 어떻게 하느냐 이런 부분들이거든요. 그래서 ai 서비스를 올려야 돼요. 올리려면 여러분들이 기본적으로 파이썬을 알아야 됩니다.

24:07 
 그래서 파이썬에서 요새 이제 많이 쓰이는 게 fast api 근데 요게 그 뭐냐 플라스크의 이제 약간 향상된 버전이라고 보시면 될 것 같아요. 그래서 요거는 약간 좀 특이한 케이스긴 한데 제가 봤을 때 여러분들이 처음 시작을 하신다라고 하면은 그니까 취업을 생각을 하신다라고 하면 둘 중 하나를 이제 선택을 하시는 게 좋다고 저는 생각을 합니다. 그래서 만약에 여러분들이 프론트를 희망을 하신다 그러면 리액트 또는 이제 뷰 아니다. 나는 이제 백핸드를 공부를 해야겠다 라고 하시면 스프링 또는 노드js 이런 것들을 공부를 하시면 되지 않을까 싶어요. 근데 요새는 취업시장에서 자바보다는 자바스크립트가 개인적으로는 좀 더 유리한 위치에 있지 않나 라고 생각을 합니다. 여러분들이 취업공고를 보시게 되면은 이런 말씀을 하시는 분들이 좀 있어요.

25:04 
 어떤 거냐면은 취업 공부 보면은 자바 스프링부트가 노드제이에스보다 훨씬 많은데 왜 노드제이에스를 공부를 하라고 하시냐 라고 하면은 어 제가 뭐 다른 수업에서도 누차 말씀드리긴 했는데 자바스프링부트 같은 경우에는 여러분들을 위해서 공고를 올려놓은 게 아니다라고 저는 말씀드리고 싶어요. 결국에는 지금 개발자들 취업되어 있는 개발자들 이직들 많이 하죠. 여러분들의 경쟁 상대는 새로운 개발자를 개발자만 있는 게 아니에요. 기존에 있던 개발자들이 이직을 워낙 많이 하다 보니까 기존에 이직을 하는 사람들도 이제 여러분들의 경쟁 상대입니다. 아니 그 경력직하고 아니면 신규 채용하고 이렇게 따로 뽑는데 왜 기존 개발자를 언급을 하시냐라고 하면은 기존 개발자들이 경력직으로 경쟁력이 안 된다.

26:00 
 싶으면은 신규 채용으로 내려와 가지고 연봉을 까고 다른 더 좋은 회사로 이직을 하려고 많이 합니다. 그래서 신규 채용이라고는 하지만 결국에는 이미 다른 데 취업을 하신 분들이 와가지고 같이 경쟁을 하고 있어요. 그래서 회사에서는 어떤 전략을 내놓느냐라고 하면은 이미 지금 만들어진 프레임워크들 자바로 되어 있는 경우들 꽤 있어요. 특히나 공공기관 같은 경우에는 무조건 이제 자바로 되어 있고 그리고 이제 대기업들 같은 경우에도 이미 어느 정도 완성된 서비스들 같은 경우에는 자바로 되어 있는 경우가 많아요. 그래서 자바 이제 자바를 사용할 줄 아는 사람들을 스프링이죠. 스프링을 사용할 줄 아는 사람들을 좀 많이 뽑으려고 하는데 이게 여러분들을 위해서 채용 공고를 딱 올려놓은 게 아니라 이거 이제 이직하는 사람들 경력직들 약간 중고 신입들이죠.

26:54 
 중고 신입들 를 이제 잡기 위해서 올려놓은 거다라고 보시면 될 것 같아요. 자바 같은 경우에는 특히나 이게 연차가 쌓이면 쌓일수록 사용을 하면 할수록 좀 더 숙련도가 크게 올라가는 면이 없지 않아 있어요. 그래서 여러분들이 java를 진짜 4년 내내 하신 게 아니라고 하면 이미 2년 차 3년 차 개발자들 따라잡기가 매우 힘들어요. 어떻게 보면 자바 자바는 그런 언어입니다. 그래서 여러분들이 진짜로 자바를 열심히 공부를 하셔가지고, 숙련도 숙련자급 이상의 실력을 만들어 두실 게 아니라 아니다 라고 하면은 요거 자바를 좀 진짜 열심히 공부를 하셔야 돼요. 그래서 어느 정도 이제 취업 시장에 나와 있는 중고 신입들 대상으로 이제 공고가 올라온 거고, 여러분들이 이 java 다른 다른 개발자들 엄청 많잖아요. 우리나라의 java 개발자만 몇 명이 있겠어요.

27:48 
 그 사람들을 이길려면은 본인만의 무엇이 있어야 되는데 이제 그런 것들 java로서는 제가 봤을 때에는 경쟁력을 갖추기 힘들다 그러면은 이제 무엇을 노려야 되느냐라고 하면은 이미 자바 개발자들이 자바스크립트 사용하는 거 좀 꺼려하거든요. 이게 자바의 특성이기도 한데 이게 객체 지향 언어이기도 하고 그다음에 타입이 명확하게 명시되어 있는 이제 그런 언어다 보니까 자바스크립트를 사용하시는 분들은 그렇게 많지가 않아요. 익숙하지가 않으신 분들이 많아가지고, 뭐 한 30대 중반까지만 하더라도 그래도 어느 정도 이제 자바나 자바스크립트 다 호환성 있게 사용을 하는데 한 30대 한 초중반 이후부터는 자바스크립트 사용하는 걸 좀 꺼려하시는 분들이 좀 있습니다. 그러다 보니까 자바스크립트 쪽으로 넘어왔을 때 아무래도 java보다는 경쟁률이 좀 약하지 않을까? 그리고 자바스크립트는 지금 워낙 빨리 발전하는 프레임워크다 보니까 이게 보면 노드 js 기반의 익스프레스 아니면 리스트 제이에스 아니면 뷰다 js 이런 거 되게 많이 있죠.

28:48 
 그리고 요새는 이거를 통합해 가지고 나오는 너스트라든지 아니면 넥스트라든지 이런 이제 서버사이즈 렌더링 이제 프리스택 프레임워크들도 여러 개 나오고 있어요. 그래서 여러분들이 이런 걸 공부하는 거는 사실 처음부터 이런 걸 공부한다라고 했을 때 그렇게 버든이 좀 큰 게 아니거든요. 그래서 요런 것들을 이제 좀 공부를 하시거나 아니면은 자바스크립트를 좀 특화를 해서 열심히 공부를 하셔가지고, 이제 약간의 어느 정도 스레셜드 이상의 수준에 올려놓으면은 여러분들이 충분히 경쟁력이 있다라고 저는 생각을 합니다. 그리고 만약에 대기업을 희망을 하시겠지만, 대기업을 누구나 갈 수 있는 건 아니잖아요. 그래서 중견 중소 그다음에 스타트업 같은 경우에도 저는 물론 이제 사담이긴 하지만 대기업보다는 스타트업이 좀 더 낫다라고 생각을 하고 있어요.

29:43 
 물론 이제 스타트업도 스타트업 나름이기는 하지만 본인이 개발을 좋아하시고 뭔가 좀 큰 한 방을 노리고 싶다라고 하시면은 스타트업 가는 것도 되게 큰 재미 중의 하나라고 저는 생각을 합니다. 대기업은 일단 개발 자체가 재미가 없고 그리고 스타트업은 본인이 하고 싶은 거 다 할 수 있으니까 저는 개인적으로 이제 여러 사람들을 만나와 봤는데 스타트업에서 일을 하시는 분들이 진짜 본인이 개발 재미있게 잘하시는 것 같더라구요. 아무튼 뭐 그렇고 그래서 중소 중견 스타트업 같은 경우에는 자바보다는 자바스크립트를 사용하는 빈도수가 점유율이 지금 훨씬 더 많이 늘었어요.

30:19 
 그래서 자바스크립트의 점유율이 자바를 넘겨버렸기 때문에 여러분들이 이제 대기업 아니면 공공기관 여기에 목매일 거 아니라면 저는 개인적으로 물론 자바 스프링부트를 아예 모르면 좀 이슈가 있을 수는 있는데, 어느 정도 본인이 선택과 집중을 해야 된다고 하면 자바스크립트를 공부를 하시는 것도 괜찮은 선택지 중에 하나가 아닐까라고 생각을 합니다. 그래서 다시 돌아와가지고 이제 서비스 개발을 해요. 그러면 기술 스택을 선정하는 단계에서 여러 가지 선택지가 있어요. 방금 말씀드렸듯이 크게 보면 일단은 요새는 처음 선택을 할 때 기준이 이거예요.

31:11 
 일단 서버 사이드 렌더링을 할 것이냐 클라이언트 사이드 렌더링을 할 것이냐 이 부분이 핵심이다라고 보시면 될 것 같아요. 혹시 이 용어 모르신다 다 알죠 그래서 이 서버사이즈 렌더링 같은 경우에는 장점이 있죠. 그리고 클라이언트 사이드 렌더링 같은 경우에도 각자의 장점이 있습니다. 그러면 우리가 지금 어떤 어플리케이션을 개발하려고 하냐면 딱 이거예요. 그냥 이 페이지에 웹페이지에 이렇게 지도가 떠 있습니다. 그 한국 지도가 이렇게 떠 있어요. 그래서 이제 한국 지도가 있으면은 여기에 이제 각 행정 구역별로 이렇게 나눠 가지고 그거를 이제 만들고 싶은 거죠.

31:58 
 여기에 버튼이나 버튼 버튼 뭐 드롭다운 메뉴 같은 게 있어서 여기에는 뭐 기온 뭐 강수 확률 아니면은 뭐 내일 뭐 일출 언제 아니면은 뭐 벚꽃 개화식이 언제 뭐 이런 거 이제 선택하는 메뉴가 있어서 여기에서 이제 고르면은 여기에 이제 각 행정 구역별로 이렇게 색깔이 이렇게 점점 바뀌면서 이제 뭔가 좀 그 일기예보처럼 이렇게 띄워주는 앱을 만들고 싶다라는 거죠. 그러면 이 앱을 봤을 때에는 이제 어떤 선택지가 좀 더 나아 보일까요? 라고 이제 하면은 서버사이즈드 렌더링이 나을까요? 아니면 클라이언트 사이드 렌더링이 나을까요? 물론 이제 여러 가지 고려해야 될 부분들은 있긴 하지만 제가 봤을 때에는 클라이언트 사이드 렌더링이 좀 더 낫겠다. 라고 판단을 할 수 있을 것 같아요. 이거를 어 판 저는 이제 어떻게 이거를 판단을 하냐라고 하면은 딱 이거예요. 여기서 이제 seo가 필요하냐?

32:56 
 필요하지 않냐로 저는 이 클라이언트 사이드 렌더링하고 서버사이드 렌더링을 나눈다라고 이제 보시면 될 것 같아요. 그래서 이 서브사이드 렌더링보다는 얘가 지금 검색 엔진이 필요하거나 아니면 노출이 필요하거나 그런 게 아니고 그리고 어떻게 보면 동적으로 이제 계속 바뀌는 그런 웹페이지가 또 될 수 있단 말이죠. 그러면 개인적으로는 클라이언트 사이즈 렌더링을 수행을 하는 게 좀 더 낫지 않냐 라고 저는 생각을 합니다. 그래서 이 클라이언 사이즈 렌더링을 하겠다고 결정을 하면 어떤 거를 결정을 해야 되냐면 또 나눠가지고 그러면 클라이언트 사이즈 렌더링은 클라이언트 사이드에서 이제 화면을 보여주는 프론트 엔드 어플리케이션이 존재를 해야겠고요. 프론트 엔드 프레임워크가 존재를 해야겠고 그다음에 이 데이터 통신을 위한 백엔드 어플리케이션이 필요해지겠다는 겁니다. 그래서 프론트 엔드 같은 경우에는 여러 가지 선택지가 있어요.

33:54 
 리액트 뷰 아니면 생 자바스크립트를 사용할 수도 있고요. 플러터 같은 거 사용할 수도 있고 여러 가지 옵션들이 있습니다. 그중에서 어 제가 이 서비스만을 이제 좀 보여드리기 위해서 이거는 이제 그냥 뷰닷 js 를 이제 사용을 하겠다는 거고, 그리고 백핸드 같은 경우에는 어떻게 여러 가지 선택지들이 있는데, 좀 고민을 해봤어요. 이게 똑같이 자바스크립트를 가는 게 나을까? 아니면 좀 다른 프레임워크를 사용해보는 게 나을까? 라고 했을 때 어 생각을 해보니까 제가 수업시간에 스프링부트를 해본 적이 그렇게 많지는 않은 것 같더라고요. 그래서 스프링부트를 한번 해보면 좋겠다. 싶어가지고 여기서는 이제 스프링을 이제 사용을 하겠다라는 겁니다. 그래서 이 애플리케이션에서는 데이터베이스는 필요가 없으니까 데이터베이스는 따로 안 주긴 하는데 만약에 여러분들이 이 어플리케이션을 좀 더 디벨롭해서 뭔가 재밌는 어플리케이션을 만들고 싶다.

34:51 
 아니면 맛집 지도 같은 걸 이제 만들어내고 싶다. 아니면 오늘 날씨를 반영을 해가지고 오늘 점심 메뉴 추천하는 어떤 서비스를 만들어주고 싶다 라고 하면 데이터베이스가 필요할 수도 있겠죠. 아니면 ai와 관련된 api가 필요할 수도 있겠죠. 그러면 여기에다가 플러스 알파로 뭔가 붙이면 되겠다고 구성을 하시면 될 것 같아요. 우리가 큰 그림에서는 어느 정도 정해졌어요. 그래서 뷰에서는 프론트 엔드죠 프론트 엔드에서는 이제 뷰를 사용을 할 거고, 여기에서는 다른 거 다 필요 없이 지도와 지도와 여기에 드롭다운 메뉴가 있겠다. 아니면 셀렉션 박스 같은 걸로 해도 크게 상관없을 것 같아요. 아니면 여러분들이 버튼을 디자인하셔도 크게 상관없을 것 같아요. 그래서 여기서는 여러 개를 선택을 하면서 날씨라든지 아니면 기온이라든지.

35:50 
 이런 것들을 보여주는 선택할 수 있는 그런 페이지를 만들겠다는 거고, 그리고 백엔드는 스프링부트를 사용을 하면서 여러분들이 쉽게 개발을 해보자라는 겁니다. 그러면은 서비스 구조도를 이렇게만 뭐 그리면 안 되겠죠. 어떤 식으로 그려야 되냐면은 여기서 이제 통신을 하는 매개체가 있어야 됩니다. 그래서 여기서 통신을 할 때에는 스프링부트를 사용을 하니까 이제 sjpi 같은 거 레스트 api 같은 거 이제 사용을 하면 쉽게 되겠고 그러면 이 뷰에서는 어떤 거를 사용을 하느냐 그냥 패치 같은 걸 사용을 할까 아니면 엑시오스 같은 라이브러리를 사용을 할까 이런 것들에 대해서도 기술 스택을 하나하나씩 선정을 하셔야 된다는 겁니다. 그리고 이제 뷰 같은 경우에는 또 이제 상태 관리하는 게 필요하겠죠.

36:43 
 그런 상태 관리하는 라이브러리 같은 것도 어떤 거를 이제 하나씩 하나씩 사용을 할지 이런 것들에 대해서 다 구상을 하면서 진행을 해야 된다는 겁니다. 그래서 여러분들이 공부를 하실 때 뷰나 리액트 문법 배우는 거는 진짜 기초예요. 그래서 그런 것들은 진짜 사실 이런 문법들 하는 거 저는 기억력이 점점 안 좋아져가지고, 배우는데 좀 오래 걸리긴 하겠지만, 여러분들은 이런 것들을 배우는데 한 일주일이면 문법들은 다 기본적으로 다 떼잖아요. 그래가지고 이런 것들 문법은 그냥 기본적으로 빨리 다 끝내고 전반적으로 서비스를 개발을 할 때 어떤 식의 라이브러리들 어떤 식의 패키지들이 필요한지 이런 것들에 대해서 많이 사용해 보면 좋겠다라는 생각이에요.

37:30 
 그래서 이 지도를 사용할 때 결국에는 아예 그냥 이따가 같이 한번 보겠지만, 네이버 지도 api의 자바스크립트 코드를 그냥 긁어와 가지고 넣을 수도 있는 거고요. 아니면 뷰 같은 경우에는 뷰네이버 맵 패키지가 또 따로 있어요. 그래서 그거를 설치해 가지고 사용을 할 것이냐라는 부분도 있을 테고 되게 다양한 방법들이 있을 건데 이게 여러분들이 모르면 어떻게 해야 될지 감이 안 잡혀요 근데 일단 뭐라도 해봤으면 나중에 다른 서비스를 개발할 때 아 이런 게 저번에 개발할 때 있었던 것 같은데, 그거를 가져와서 사용을 해볼까 이런 식으로 접근을 할 수가 있는 거고요. 그다음에 통신이라든지. 아니면 스테이트 저장 이런 것들은 기본적으로 다 들어가는 내용들이니까. 여러분들이 이런 패키지들을 사용을 해보시면서 통신을 할 때에는 뭐 한 패키지가 이렇게 세 개가 있는데, 이 중에서 우리 서비스에 적합한 패키지가 무엇일까?

38:28 
 이런 거 선정하는 과정들을 하나하나씩 거치면 좋다라는 겁니다. 그래서 저는 그렇게 생각을 해요. 나중에 여러분들이 포트폴리오를 만드실 때 이게 개발 일지 같은 것도 작성을 하면 좋거든요. 처음에 만들어야지 나중에 서비스 다 만들고 이거 작성을 하려고 그러면은 되게 귀찮고 일이거든요. 그래서 처음부터 만들 때 어떤 식으로 하냐면 이런 여러 가지 옵션들이 있는데, 이 서비스 구조들을 봤을 때 이런 식의 통신들이 필요하고 얘 같은 경우에는 그렇게 어려운 난이도가 아니라 그냥 간단하게 앱스트랙션이 잘 되어 있는 그런 패키지를 사용을 하는 게 좋겠다라고 판단이 들 수 있거든요. 그러면은 그냥 엑시오스를 사용을 했다. 왜냐하면, 여러분들이 개발 일지에다가 이런 엑시오스를 사용하게 된 경위 같은 거를 좀 적어두면 나중에 여러분들이 개발을 할 때 이거를 이제 왜 선택을 했는지 가져다 쓸 수 있는 거고, 여러분들이 생각만 하는 거랑 글로 남겨두는 거랑 나중에 이제 기억이 나는 포인트들이 다를 거예요.

39:28 
 그래서 저 같은 경우에는 이런 서비스를 개발할 때 전반적으로 어떤 식의 구조들을 딱 잡고서 여기서 세부적인 구현 기획들을 쭉 들어갈 때 어떤 어떤 패키지를 사용하면서 개발을 하겠다. 라고 여러분들이 고려를 해보시면 될 것 같아요. 그래서 만약에 다국어 패키지가 필요하다 그러면 i18n 같은 패키지들을 많이들 사용을 하는데 이런 것들을 그냥 단순히 있으니까 가져와서 사용했다 하면은 이제 나중에 왜 이거를 굳이 사용하셨어요. 라고 물어보면 사실 딱히 답할 게 없잖아요. 그런데 여러 개의 옵션들을 가져다 놓고 비교를 해보면서 우리 서비스에는 이게 좀 더 맞겠다. 라고 하는 것들을 기록으로 남겨둔다고 하면 다른 사람들한테 보여줄 때도 좋고 여러분들이 다음에 이런 똑같은 고민들을 하게 될 거예요. 서비스를 개발하면 그래서 어떠한 녀석이 좀 더 나은지 이제 여러분들의 경험에 비추어 봐가지고 선택을 하는데 도움이 될 수가 있다는 겁니다.

40:27 
 그래서 그냥 서비스를 개발할 때 전반적으로 그냥 서비스를 무작정 이렇게 개발을 하는 게 아니라 하나하나 단계를 거쳐가면서 정형화시켜놓고 그리고 이제 하나씩 세분화시켜가면서 얘네들을 그냥 가져다가 쓰면 이렇게 구조를 처음에 잡고 시작을 하면 좋은 장점이 뭐냐면 이런 식으로 구조를 잡고 gpt한테 물어보면 좀 더 쉽게 나와요. 여러분들이 그냥 처음부터 뭐 이런 거 이제 만들어 줘라고 하면은 gpt가 뭔가 만들어 줄 텐데 여러분들이 어떻게 구성해야 될지도 모르고 이게 잘 돌아갔는지도 모르고 일단 복붙을 해보니까 안 돼요. 동작을 안 해요. 이런 경우들이 꽤 많이 있습니다. 하지만 이런 식으로 세부적으로 다 나눠가지고 어 지금 이제 좀 쉬었다가 이제 다시 또 진행을 해볼 건데 어 그때는 어 기능 세부 세부로 다 나눌 거예요.

41:15 
 그래서 그 세부적인 기능을 어떻게 구현을 할지 어떻게 어 gpt를 가지고 이제 물어보면서 구현을 할지에 대해서 한번 보려고 하니까 여러분들이 어 그냥 이 시간에 같이 따라 하셔도 되고요. 아니면 제가 어떤 서비스를 할지 보여드릴 테니까. 그런 것들을 여러분들이 실습을 통해 가지고 쉽게 구현을 해보시면 좋지 않을까? 생각을 합니다. 그래서 좀 쉬었다가 다시 진행을 해보도록 할게요 화장실 때워가지고 아 네 제가 해놨습니다.

51:57 
 이렇게 막 상세 케이크 메시지를 따로 출력을 하거나

