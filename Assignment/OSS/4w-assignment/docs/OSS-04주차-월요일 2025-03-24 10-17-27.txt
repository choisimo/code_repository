00:17 
아유 보이시죠. 네 에 글씨 잘 보이죠. 네이버 앤 클라우드 들어가 가지고 한번 어떻게 되어 있는지 한번 봅시다 그래서 일단은 이거 회원가입은 다 하셨나요?

01:22 
 인증번호가 네 그래서 여기 이제 네이버 클라우드 이게 메인 홈인데 여기서 이제 콘솔 누르면은 이렇게 들어와지거든요. 그래서 요 콘솔 들어오면은 뭐 여러 가지 서비스들을 이제 시작을 할 수가 있어요. 그래서 보통은 요 왼쪽에 있는 서비스를 누르셔가지고, 이제 시작을 하시면 됩니다. 그래서 되게 다양한 서비스들을 이용할 수 있어요. 그래서 뭐 aws처럼 클라우드도 이용할 수 있고 아니면은 뭐 여러 가지 뭐 보안과 관련된 것들 아니면 여러 가지 api를 이용할 수 있는데, 저희가 이제 사용을 할 거는 이제 지도 api다 보니까 그냥 맵을 검색하시면 옆에 이렇게 떠요 근데 위에 있는 거 말고 밑에 있는 ai 네이버 api 여기로 들어가셔야 됩니다.

02:21 
 처음에는 어플리케이션이 등록이 안 되어 있을 건데 여러분들이 어플리케이션을 등록을 해주셔야 됩니다. 그래서 어플리케이션은 여러분들이 원하시는 어플리케이션 이름으로 설정을 해주시면, 되고요. 그리고 서비스를 밑에서 선택을 하셔야 돼요. 지속 서비스를 이용을 하고 싶다라고 하시면은 그냥 요거 이제 맵스라는 이제 클릭을 하면 이제 다 선택이 되거든요. 그래서 이거 선택을 한다라고 해서 비용이 나가는 게 아니라 사용한 만큼 이제 비용이 지출되기 때문에 일단 뭐 다 선택하셔도 괜찮아요. 그리고 클로바나 다른 서비스들도 이용을 할 수 있으니까 이런 것들은 나중에 필요하시면 한번 보시면 될 것 같고요.

03:07 
 그리고 근데 여러분들은 이제 웹 안드로이드 ios 이런 것들을 이용하실 수 있는데, 지금 할 거는 웹앱을 개발을 하고자 하니까 여러분들이 여기 옆에다가 그냥 hdp 로컬 호스트로 이제 입력을 하시면 됩니다. 그래서 여러분들이 이제 그냥 간단하게 로컬에서 테스트를 해볼 예정이니까. 이렇게 로컬 호스트로 설정을 추가를 하시면 될 거예요. 그러면은 이제 뭐 사용 방법 어렵지 않죠 그래서 여기서 등록을 누르시게 되면은 네 이런 식으로 이제 뜰 거예요. 그래서 마이앱 그리고 서비스 구분 여러 가지 서비스들이 있습니다. 그래서 동적인 앱과 정적인 앱 그리고 이제 좌표 변환해 주는 뭐 그런 여러 가지들 이제 서비스들이 있으니까 여기서 이제 그냥 한 번씩 이제 보시면 될 것 같구요.

04:00 
 그리고 여기에 이제 당일 사용량 당월 사용량 이렇게 있으니까 반영되는데 1분 정도 걸린대요 그래서 이제 여러분들이 많이 걱정이 되신다라고 하면은 한도까지도 설정할 수도 있어서 그냥 여러분들이 그냥 사용해 보시면 되지 않을까 싶어요. 그래서 이제 뭐 요런 것들 가지고 이제 세팅이 일단 완료가 됐다 라고 보시면 됩니다. 그래서 여기 이제 인증 정보를 누르시게 되면은 여기 이제 다양한 서비스들을 이용할 수 있는 키를 제공을 해줍니다. 그래서 시크릿 키하고 그다음에 클라이언트 키가 있는데, 여러분들은 그냥 클라이언트 키 가지고 이용을 해보시면 되겠다. 라는 겁니다.

04:53 
 그래서 우리가 지금 어떤 서비스를 이용을 할 거냐라고 하면은 어떤 서비스를 어 아아 아 얘를 꺼야겠네, 네 어떤 서비스를 개발을 해볼 거냐 라고 하면은 요런 거 이제 보시면 될 것 같아요.

06:07 
 그래서 우리가 지금 프론트 엔드 쪽에서는 이제 지도를 띄우게 될 거고요. 그리고 이제 백핸드 같은 경우에는 우리가 날씨 기온 이런 것들을 개발해 본다고 보시면 될 것 같아요. 그래서 지도 같은 경우에는 어떤 기능들이 있어야 되는가를 한번 정의를 해볼게요 우리가 이런 것들을 기능명세라고 많이들 부르는데 결국에는 나중에 여러분들이 취업을 하셨을 때 기능명세서 짜와라 라고 하면 그냥 이런 식으로 짜가시면 돼요. 각각의 프레임워크들마다 어떠한 기능들이 이제 들어가게 되는지 그런 기능 단위로 구성을 하시면 된다라고 보시면 될 것 같아요. 그래서 프론트 엔드 같은 경우에는 기능도 중요하기는 한데 이 기능 플러스 그 뭐냐 디자인 요소가 같이 들어가야 됩니다. 백엔드 같은 경우에는 만약에 api가 필요하다 그러면 api 구조까지 가져가는 거를 좀 권장을 드리는 편이에요.

07:05 
 그래서 이제 우리가 화면을 이렇게 구성한다고 하면 여기가 이제 화면이다. 화면이다 라고 이제 했을 때 어떤 게 있어야 되느냐라고 하면 우리가 여기에 일단은 이게 뭐 헤더를 이렇게 좀 구성을 할 수가 있을 것 같아요. 헤더를 이제 구성을 해서 여기에 어떠한 메뉴가 있어야 되느냐라고 하면은 크게 홈 같은 게 있으면 좋겠죠. 뭐 홈 같은 거 있고 그다음에 현재 기온 기온 그리고 뭐 어 24시간 내 강수 확률 확률 뭐 이런 게 있으면 좋겠고 그리고 뭐 풍량 같은 거 있으면 좋겠죠. 풍량 뭐 이런 게 있으면 좋겠고 그리고 또 뭐가 있을까요?

07:57 
 음 플러스 알파로 알파로 이제 뭔가가 들어가면 좋겠다라고 생각을 할 수가 있겠죠. 그래서 이제 메뉴가 뭐 이렇게 버튼이 이렇게 좀 구성이 되거나 아니면은 이제 뭐 그림 같은 아이콘 같은 거 그래서 웹소이 설계 때도 많이 했던 게 백이라든지. 아니면 파스라든지 이런 아이콘들을 활용하면 뭔가 좀 예쁜 디자인이 나올 수도 있겠죠. 그리고 난다음에 이 밑에는 지도가 이렇게 들어가면 좋겠다라는 겁니다. 여기 지도가 크게 박혀 있어 가지고 여기서 현재 위치를 기반으로 해서 왼쪽에는 그리고 왼쪽에는 이제 뭐 날씨 날씨 요약 정보 정보 같은 거 이렇게 좀 들어가면 좋지 않을까라고 생각을 해볼 수가 있어요.

08:54 
 그래서 이런 식으로 컴포넌트 디자인을 간단하게 만들 수 있고 그리고 조건들을 여러 가지가 줄 수 있겠죠. 지금 네이버 지도 같은 경우에 이제 보게 되면은 이게 스케일이 있거든요. 그 축척이라고 그러죠 이제 그런 게 있어가지고 몇 킬로 이상이면 즉 우리나라의 시가 이렇게 보이게 되면은 뭐 이렇게 시도가 이렇게 여러 개가 있어요. 그러면은 얘네들을 색칠을 해 가지고 일기예보처럼 나타낸다든지 아니면은 뭐 그냥 이 한 화면에 그냥 이렇게 도로가 있고 뭐 해 가지고 건물이 있고 해서 그냥 내 위치가 이렇게 보이게 된다. 대충 이게 5km 또는 아니면은 뭐 한 10kg 정도 이제 될 거거든요. 한번 볼까요?

09:49 
 네이버 지도를 한번 봐봅시다 여기 지금 잘 보이실지 모르겠지만, 오른쪽 밑에 축척이 있어요. 지금 요 한 칸이 100m를 나타낸다라는 그런 거죠. 그래서 요거를 이제 축소를 하다 보면은 하다 보면 이제 시도가 보이는 읍면 또는 시도가 보이는 그런 시점들이 있을 거예요. 그래서 지금 여기를 확인을 해보면 10km 정도네요. 이제 10km 정도고 한 번 더 확대를 하면 5km 네 5km도 이제 시도가 보이긴 하니까 5km를 기준으로 하죠.

10:23 
 5km를 기준으로 해서 이 축척이 5km보다 작다라고 하면은 요게 이제 보이면서 현재 위치에 대한 요약 정보가 이제 옆에 팝업으로 뜨게 되는 거고, 만약에 5km보다 커지게 된다라고 하면은 이거 없어지고 이제 지난 시간에 했던 것처럼 이제 각 도시들마다 화면에 그림이 그려지는 뭐 그런 식으로 생각을 해보시면 될 것 같습니다. 그게 이 지도 화면에 보이게 된다라고 보시면 될 것 같고, 그 다음에 또 필요한 기능이 무엇이냐 라고 했을 때 그냥 이건 컴포넌트 구성인 거고, 디자인적인 요소가 고려되면 좋지 않을까 싶어요. 그래서 보통 uiux라고 많이들 얘기를 하는데 ui적인 측면에서 디자인과 관련된 용어들이 좀 많이 있거든요.

11:15 
 그래서 여러분들이 프론트 핸드를 공부를 하실 분들은 알고 계시겠지만, 백핸드를 공부를 하실 분들도 어떻게 보면 남들한테 보여주는 것도 되게 중요하잖아요. 디자인적인 요소도 그래도 gpt한테 물어볼 때 어떤 식으로 짜달라 하면 되게 잘 짜주는 편이라서 그런 것들 한번 구성하면 좋지 않을까 싶어요. 그래서 가장 많이 최근에 쓰는 게 글래스 몰피즘이라는 글래스 몰피즘이었나 비즘이라는 뭐 요런 이제 디자인을 요새는 많이 쓰고 있어요. 그래서 뭐 기존에 많이 썼던 거는 뭐 메테리얼 디자인 메테리얼 이제 뭐 디자인 근데 화면이 안 나와요. 아 죄송해요. 나오죠. 네 그래서 이제 글래스 몰피즘이라는 이제 디자인적인 요소가 있고 그리고 메테리얼 디자인은 한 몇 년 전에 유행을 했던 그런 디자인이 있어요.

12:13 
 이런 식으로 몇 개의 디자인적인 컨셉을 얘기하는 게 있거든요. 그래서 도표 찾아보면은 l이네요. r이 아니라 그래서 뭐 이런 디자인들 많이 보셨을 거예요. 아이폰을 쓰시는 분들이라면은 이제 뭐 이런 식의 디자인들을 많이 보셨을 건데 이런 뒤에 백그라운드가 깔리고 뭔가 투명한 컴포넌트들이 배치가 되면서 약간 핸드폰적인 ui가 나타내는 게 이제 글래스 볼피즘이다 라고 이제 보시면 될 것 같아요. 그래서 이런 디자인적인 요소들은 되게 많이 있습니다. 그래서 글래스 몰피즘이라든지. 아니면 뉴 몰피즘이라든지. 요런 것들은 이제 최근에 많이 쓰인다고 하는데 저는 약간 좀 눈 아파서 별론 거 같기는 한데 뭐 아무튼 뭐 요런 식으로 이제 되게 다양한 디자인적인 요소들이 있습니다.

13:08 
 그래서 인도우시비 컨셉 뭐 이런 것도 있기는 한데 되게 다양한 디자인적인 요소들이 있으니까 그래서 이런 식으로 짜시면 된다라는 거예요. 그래서 예를 들어서 요런 이제 그냥 ppt 같은 거나 아니면 여러분들이 손으로 그리셔도 돼요. 이런 거 손으로 그리고 gpt한테 요거 이제 사진 이렇게 넣어두고서 이거 이제 html로 만들 건데 아니면 또는 리액트나 뷰로 만들 건데 이제 글래스 몰피즘이나 아니면 뉴몰피즘 비즘 뭐 요런 이제 디자인적인 엘이라 그랬죠 이런 디자인적인 요소를 반영해서 이제 뭐 구현을 해 달라 라고 하면은 gpt가 되게 이쁘게 css를 화려하게 만들면서 잘 구현을 해 줍니다. 그래서 여러분들이 디자인적인 요소 그냥 hml 컴포넌트 그냥 박지 마시고 어차피 gpt 활용해서 구현을 하실 거라고 하시면 이런 요소들 반영을 해서 gpt한테 만들어 달라고 하면 되게 잘 만들어주는 편이니까. 이런 것들 한번 해보시면 좋을 것 같습니다.

14:05 
 그래서 네, 뭐 이런 거 이제 한번 물어보면 좋겠죠. 뭐 클로드에다가 한번 물어보도록 하겠습니다. 그래서 그냥 되게 간단해요. 파워포인트 이렇게 만들고 음 하나 만들고 뭐 예를 들어서 이렇게 그냥 만드는 거죠. 여기에다가 이런 사각형 박스 있고 아까 뭐라 그랬죠 홈 홈 홈이랑 호미랑 그 다음에 뭐 있냐 호미랑 그리고 그 뭐 현재 기온 현재 기온 어 그리고 24시간 내 강수량 그리고 이제 또 뭐 있었죠.

15:02 
 뭐 풍량 네 풍량 뭐 이런 거 이제 있고 하나는 뭐 일몰 시간 뭐 이런 걸로 그냥 해볼게요 이렇게 이제 만들고 만들고 여기에다가는 이제 뭐 그냥 간단한 도형을 입힐 거니까 여기에다가는 디브를 디브를 뭐 하나 넣어주면 되겠죠. 그래서 이거를 그냥 캡처해서 가져가세요. 이거 선은 필요 없으니까 없애버리고 이거를 그대로 가져가서 이렇게 물어보면 된다라는 겁니다. 엠버엘 웹 앱을 하나 만들어 볼 건데 내가 ui 디자인을 해봤어 사진을 보고 그래스 멀피즘을 해볼까요?

16:01 
 그래스몰피즘 형식으로 어 뷰 코드 만들어줘 네 이러면은 이제 뭐 잘 만들어 줍니다. 네 여기 지금 css 스타일 되게 잘 만들어주고 있어요. 그래서 뭐 인덱스 더 hml에는 뭐 이런 게 들어가면은 좋다라는 거고, 여기에 지금 뭐 내비게이션 바 같은 것도 잘 만들어주고 있죠. 네 그래서 여기 지금 보시면 각 페이지별로 컴포넌트들 어떻게 구성이 되어 있는지 이렇게 잘 구성이 되어 있습니다. 아니면 이거 이대로 리액트로 만들어 줄래 이런 식으로 이제 물어보게 되면은 얘가 뭐 리액트도 뭐 잘 만들어 줍니다.

17:01 
 그리고 gpt 같은 경우에는 클로드는 뭐 그럴지 모르겠는데 gpt 같은 경우에는 요거 이제 플레이그라운드라고 해 가지고 아예 그냥 그 요 화면에서 이 컴포넌트들 보여주기까지도 하죠. 되게 잘 되어 있는 편이라서 좋은 것 같아요. css도 이렇게 쭉 만들어주면서 되게 나름 잘 만들어 줍니다. 그래서 여러분들이 그냥 기본적인 css 내용들 아니면은 뭐 sml 컴포넌트들 뭐 이런 것들만 안다라고 하면은 그런 거 이제 만드는 거는 뭐 크게 어렵지 않다라고 이제 보실 수 있을 것 같아요. 그래서 이런 것들 만들어 가지고 그냥 디자인적인 요소 반영해서 넣으면 되겠다라고 보시면 될 것 같아요. 그래서 이렇게 할 수도 있다는 거고요.

18:13 
 예스 감양 공유 자 그래서 이런 식으로 이제 프론트 엔드는 만들면 되고 uiux가 끝이냐 라고 하면 그것도 아니란 말이죠. 어떤 게 좀 더 있느냐 라고 하면 이거 말고 추가적으로 저것도 이제 만들어야 돼요. 통신하는 파트 하는 파트도 만들어야 된다는 겁니다. 그래서 우리가 프론트 엔드 만들어 놓고 백엔드에다가 통신을 하면서 데이터를 주고받을 거기 때문에 통신하는 파트 예를 들어서 엑시오스라든지 아니면 기본적으로 그냥 패치가 내장 함수로 되어 있으니까 이런 애들 사용을 하셔도 된다는 겁니다. 그리고 이제 또 상태 관리가 필요할 수도 있어요. 프론트 핸드를 잘 모르시는 분들은 상태 관리에 대해서 잘 모르시겠는데 예를 들면 이런 거예요. 지금 헤더 같은 경우에도 선택할 수 있는 게 5개가 있잖아요.

19:12 
 근데 이거를 글로벌 변수로 만들어 가지고 현재 상태를 기억하고 싶다라는 거죠. 그래서 상태관리라고 하면은 그냥 어 간단하게 어 비유를 들자면은 그냥 어 전역 변수를 만들어가지고 수를 만들어가지고 관리를 한다. 이런 시스템으로 이해를 하시면 될 것 같아요. 그래서 물론 세부적으로 들어가면 좀 다르긴 하지만 프론트렌즈 잘 모르시는 분들도 계실 테니까. 간단히 설명을 드리면, 예를 들어서 지금 기온 같은 거를 클릭을 했어요. 그러면 기온이라는 상태를 가지고 있으면서 이 화면에 그려지는 모든 내용들은 이 기온이라는 스테이트를 기반으로 화면을 그려준다. 뭐 이런 개념으로 생각을 하시면 됩니다. 그래서 이런 것들 아니면 지금 5km를 기준으로 해서 이제 이게 뜰지 말지 이런 걸 정하는 거잖아요.

20:04 
 그러면 지금 상태 관리를 함으로써 이런 ui적인 컴포넌트가 존재를 할지 안 할지 그런 부분들을 이제 하나까지 고려를 할 수도 있다는 겁니다. 그래서 이런 내용들로 보시면 될 것 같고요. 어 또 추가적으로 이제 뭐 넣어야 될 기능은 뭐 이제 이런 거죠. 뭐 이제 5km 기준으로 기준으로 ui 변경이 있어야 된다. 그리고 이제 각 요 스테이트들마다 그래서 뭐 홈에서는 이제 뭐가 뜨고 그리고 여기 기온에서는 이제 어떤 게 뜨고 여기 색깔은 어떤 색으로 잡아가고 이런 식으로 각 컴포넌트들마다 강수 같은 경우에는 어떤 게 뜨게 되고 만약에 여기서는 api를 호출을 하는데 api의 엔드 포인트 어디에다가 호출을 하겠다. 이런 식으로까지도 다 작성을 해놓으면 좀 더 편하게 개발을 할 수가 있겠죠. 있다는거죠.

21:02 
 그래서 이런 api 같은 경우에는 백엔드에서 개발할 api와 딱 매핑을 시켜놓으면 그냥 구현하는 거 이거 그림만 보고서 내가 만들어 놓은 구조도만 보고서 쉽게 쉽게 개발을 할 수가 있겠다는 거죠. 이런식으로 기능들을 만들어서 구현을 하겠다고 생각하시면 될 것 같아요. 그러면 백엔드에서는 어떤 거를 개발을 하냐고 하면 여기서는 되게 오히려 간단할 수가 있어요. 뭐냐 공공데이터에서 날씨와 관련된 내용이 있었죠. 그래서 이거는 그냥 단기예보 단기예보 api를 활용을 하겠다고 보시면 될 것 같아요. 지난 시간에 코드 드렸던 거에서 api 호출하는 방법들이 적혀 있었어요.

21:53 
 물론 파이썬이긴 하지만 그 엔드 포인트에다가 여러분들이 발급받은 키 넣어 가지고 실행시키면 api를 받아올 수가 있었죠. 저는 그거를 한 번에 다 요청을 해서 데이터를 방식이었는데. 그러지 말고 이제 여러분들이 데이터를 파싱을 해서 프론트 엔드로 보내주자 라는 겁니다. 그래서 백엔드 같은 경우에는 이제 딱 이거예요. 프론트 엔드에서 요청이 오면 프론트 엔드에서 어떤 요청이 왔어요. 요청이 오게 되면 이 요청을 파싱을 해서 그냥 돌려줘도 되는 거고요. 아니면 공공 데이터 포털 오픈 api에서 특정한 엔드 포인트에다가 요청을 해 가지고 어떤 데이터를 받아오면은 그 데이터를 파싱을 해서 다시 프론트 엔드에다가 리스폰스를 보내줘야겠죠. 그러면 이게 한 쌍이란 말이에요.

22:50 
 이 기능 단위가 이렇게 프론트 엔드에서 요청이 들어오면 백엔드에서 다시 오픈 api로 요청을 한 다음에 그 응답 받아온 거 파싱을 해서 다시 프론트 엔드로 보내준다. 이게 이제 한 쌍이죠. 그러면 api 호출을 할 게 이 상태에서는 그렇게 많지가 않아요. 지금 보면 홈은 필요 없는 거라고 치고 현재 기온 강수확률 풍량 그다음에 플러스 알파 한 4개 정도면 되겠죠. 그래서 예를 들어서 api 1번 api 1번 이렇게 만들어 놓고 현재 기온 현재 기온 api 이렇게 만들어 놓고 여기서는 뭐 만들어주면 되겠죠. 그래서 api의 버전 1에 그리고 웨더에 커런트 템퍼러처 이렇게 api를 만들어 두면 되지 않을까 싶어요.

23:47 
 그래서 이 주소를 가지고 프론트 엔드에서 요청을 하게 되면 이 api에서 하는 기능들을 적어두면 된다는 겁니다. 세부적인 기능을 적어둘 필요는 없어요. 어떤 걸 적어두느냐라고 프론트 엔드에서 요청하는 방식 그리고 프론트 엔드에 리스폰스가 전달되는 방식에 대해서 적어놓으면 됩니다. 즉 스웨어와 비슷한 방식으로 적어두면 된다. 라는 거예요. 그래서 예를 들어서 이런 것들을 적어주면 되겠죠. 요청이 들어올 때 리퀴스가 들어올 때 어떤 녀석들이 들어오느냐라고 생각을 해봤을 때 일단은 보통 요청을 한다고 치면 타임 스탬프는 무조건 받는 게 그냥 좋아요. 타임 스탬프 그래서 요청 시간에 대해서는 물론 받는 게 좋습니다. 그다음에 뭘 받아야 되느냐라고 하면 현재 기온이에요.

24:40 
 그래서 이거를 모든 도시를 싹 다 긁어가지고 프론트 엔드로 보내서 프론트 엔드에서 파싱해서 넣을 것이냐 아니면은 이게 아예 그냥 도시를 요청을 하면은 그 도시에 대해서 이제 파싱을 해서 보내줄 것이냐 뭐 이런 것도 있을 수 있겠고요. 아니면은 이제 요 오픈 api가 어떻게 보면은 위도 경도 기반이잖아요. 위도와 경도 기반의 api 호출이니까. 아예 그냥 요청으로 위도와 경도 숫자를 플로팅 넘버를 받아가지고, 여기 오픈 api에다가 리퀴스트를 보낼 수도 있겠죠. 그렇게 하셔도 되고 아니면 사실 얘를 까보면 위도 경도이긴 하지만 nx y라는 격자점들을 기준으로 해서 요청을 하는 경우들이 있어요. 그래서 요청 자체를 nxny를 받을까? 뭐 이런 거를 이제 백핸드 개발자라면 하나씩 고민을 해보자 라는 거죠. 일단은 첫 번째로, 자 여기 리퀘스트에다가 도시를 받았다고 칠게요 도시를 받았어요.

25:38 
 그러면은 프론트 엔즈에서 생각을 해봅시다 프론트 엔즈에서 생각을 했을 때 자 우리가 뭐 10km가 넘어가면은 이렇게 각 시도별로 이렇게 나눠 가지고 여기 이제 현재 몇 도 현재 몇 도 현재 몇 도 이런 식으로 색칠을 해줘야 돼요. 네, 그렇죠. 우리가 이렇게 서비스를 개발을 하기로 했으니까 자 그러면은 이런 api를 하나를 만들어 놨다고 치면은 자 우리나라의 시도가 대충 한 200 몇 개가 있는데, 그러면은 이 모든 도시의 데이터를 받아오기 위해서 어 200번에 호출을 해야 되는가 라고 하면은 이거는 살짝 의문이 있을 수가 있겠어요. 네 그럼 만약에 뭐 이런 거 안 받고 그냥 현재 기온 api를 호출을 하면 우리나라의 모든 행정구역에 대해서 이제 200개가 아니라 기억이 났어요. 4천 개였어요.

26:25 
 모든 4천 개에 대해서 도시를 받는다고 치면 api 호투를 4천 번을 해야지 모든 행정구역을 다 표시할 수 있는 거죠. 이렇게 할 것이냐 아니면 우리가 도시를 받지 않고 그냥 이 api에 요청을 했을 때 이 4천 개의 행정구역에 대해서 데이터를 쏴주고 프론트에서 알아서 처리를 하느냐 이런 부분에 대해서 고민을 해볼 필요가 있다는 거예요. 그래서 이게 프론트 엔드에서 처리를 할 것이냐 백엔드에서 처리를 할 것이냐 이거는 소통을 하면서 처리를 해야 되는 부분들이 있는데, 단순히 생각을 해봐도 4천 번을 호출을 프론트 엔드에서 하는 게 맞느냐 라고 치면 트래픽이 발생하는 부분에 있어서도 백엔드에서 이거는 좀 지양을 해야 되지 않을까 싶기도 하죠.

27:19 
 그런 부분들 때문에 무언가 도시를 받기보다는 그냥 프론트 엔드에서 현재 기온 api를 호출을 하면 어떠한 정보를 넘기지 않아도 모든 행정구역들에 대해서 데이터를 담아서 쏴준다. 이렇게 생각을 해볼 수가 있겠죠. 근데 만약에 우리가 이렇게 볼 수도 있잖아요. 한 지도에 4천 개 행정구역이 다 표시가 되어 있어요. 뭐 그런 경우도 있겠지만, 이게 확대가 좀 되어 가지고 이 화면에 대충 한 10개에서 20개 정도의 행정구역만 이제 표시가 되는 거예요. 지도를 좀 확대를 했더니, 그러면은 이제 이 클라이언트에서 프론트에서 요청을 하는 거죠. 이거 이 도시들에 대해서만 이제 보내줘 라고 하면은 이 프론트 엔드에서는 그런 api 안 만들었는데 하면서 그냥 4천 개를 쏴줍니다. 그러면 이 프론트 엔드에서는 여기서 내가 원하는 시도 찾아가지고, 파싱을 해서 넣어야 되는 부분들이 있겠죠.

28:14 
 이러면 프론트 앤드단에서 귀찮아질 수도 있겠다라는 거죠. 그래서 이런 것들을 여러분들이 고민을 해보셔야 되는 거예요. 그래서 이런 식으로 파라미터를 넣어가지고 하나하나씩을 만들 api를 만들지 아니면은 그냥 전체적으로 하나를 만들어 가지고 프론트 엔드에서 파싱을 하는 방식을 만들지 이런 것들에 대해서 고민을 해보시라 라는 겁니다. 그래서 물론 백엔드단에서 api 여러 개 쭉 만들어 놓고 프론트 엔드에서 골라서 써 라고 하는 방식을 선택하는 경우가 꽤 많이 있어요. 그래서 어떤 api 1번 같은 경우에는 똑같이 현재 기온 api인데 얘는 모든 도시 그리고 api 2번 같은 경우에는 똑같이 현재 기온이에요. 현재 기온 api인데 여기서는 특정 도시다 특정 도시다 이런 식으로 만든다는 거죠. 그래서 이런 식으로 기획을 할 수도 있겠다는 겁니다.

29:10 
 그래서 여기서 리퀘스트가 여기서는 이거 안 들어오고 그냥 타임 스탬프만 들어올 수도 있겠죠. 아니면 심지어 그냥 아무런 파라미터도 안 받아도 없을거예요. 왜냐하면, 이 백엔드에서 그냥 타임스탬프는 알아서 긁어올 수 있기 때문에 굳이 안 받아도 되고 그러면 여기서 리스폰스를 어떤 걸 보내주느냐라고 했을 때 이 포맷들도 여러분들이 다 정해 놓으셔야지 나중에 개발할 때 편하다는 거예요. 왜냐면은 이게 api를 하나하나 만들 때마다 이런 포맷들을 정하다 보면 나중A4맷이 일관적이지가 못하고 나중에 맞추려고 보면은 로직들을 수정해야 되는 경우들이 조금씩 있거든요.

29:52 
 처음 그러니까 아예 나중에 수정하는 방향보다는 처음부터 이 api 포맷들을 다 일관적으로 만들어 놓고 요거를 이제 이거를 이제 나중에 코드로 구현을 하면은 아 내가 어 이 인풋을 받아가지고, 이 아웃을 만들어야겠네, 그러면 이 사이의 로직은 어떻게 구현하면 되겠네 이게 여러분들이 나중에 틀이 다 틀이 다 잡히거든요. 그래서 이런 식으로 좀 구성을 하면 좋겠다는 겁니다. 그래서 백엔드 같은 경우 프론트 엔드는 기획을 할 게 되게 많아요. 일단 디자인적인 요소가 들어가니까 기능과 디자인을 연결시켜가면서 기능 명세를 해야 되는 것들이 많은데 백엔드는 어떻게 보면 지금 데이터베이스가 없어서 그렇긴 하지만 일단 되게 구현할 부분이 되게 쉬워요 api만 만든다고 하면 이 api에 들어오는 인풋과 아웃 붓을 어떻게 설정을 해줄 것인가? 이 부분만 여러분들이 고민을 하시면 된다는 겁니다.

30:51 
 그래서 이거를 가지고 이제 직접 개발을 해볼 거예요. 그래서 이번 수요일에 여러분들이 오셔도 되고 안 오셔도 됩니다. 저랑 같이 개발을 하실 분들은 이제 오시면 돼요. 제가 어떻게 코딩을 하나 궁금하신 분들은 오셔가지고, 여러분 따라 하시면서 구경을 하시면 되고 만약에 안 오신다 라고 하시면 이거를 실습 과제를 똑같이 제출을 하셔야 됩니다. 그래서 이거는 뭐 오시든 안 오시든 공통이에요. 제가 이번 주말까지 과제를 열어둘 건데 1번 이거를 하셔야 됩니다. 1번 요 기술 명세서 있죠. 기술 명세서를 여러분들이 이제 손으로 직접 작성을 해보시면 좋을 것 같아요. 그래서 진짜 손으로 쓰셔도 되고요. 아니면은 워드로 만드셔도 되고요. 아니면 ppt 같은 걸로 정리를 하셔도 상관없어요.

31:40 
 이 기술 명세서는 여러분들이 알아보기가 여러분들이 어 기술을 그니까 프론트 엔드든 백엔드든 개발을 하면서 만들 거기 때문에 디자인이 안 입어도 상관없어요. 여러분들만 알아보셔도 상관없습니다. 하지만 이런 것들을 한 번씩 만들어 보면서 여러분들의 생각을 정리를 해보시면 좋을 것 같고요. 두 번째는 프론트엔드예요. 프론트 헤드 코드 저는 이제 뷰로 개발을 하겠다라고 말씀을 드렸습니다. 여러분들은 만약에 리액트가 좀 더 편하다 라고 하시면 그냥 리액트로 만드셔도 상관은 없어요. 그리고 3번은 백엔드예요. 저는 이거 스프링으로 만들겠다고 얘기를 했는데 나는 스프링 빌드하는 방법도 잘 모르고 잡아도 잘 모르니까 익스프레스 노드js 같은 거 사용을 하겠다고 하시면 뭘 하든 상관은 없어요. 그냥 이거는 예시일 뿐이고 여러분들이 편하신 걸로 이제 개발을 하시면 됩니다.

32:36 
 그래서 요거는 딱히 배포할 필요 없이 그냥 로컬에서만 동작하면은 됩니다. 그래서 들어가야 될 기능 딱 제가 말씀드렸어요. 현재 기온 그다음에 24시간 내 강수 확률 그다음에 풍량 그리고 플러스 알파 어떠한 기능이든지 상관없습니다. 이게 그 api 문서 가보시면은 그 공공 api 문서 가보시면 되게 다양한 데이터들을 제공을 해주거든요. 그중에 그냥 하나를 골라가지고 이런 ui에다가 이렇게 구성을 하시고 이것과 연결된 백엔드 api를 만드셔 가지고 구성을 하시면 돼요. 이거를 여러분들의 이제 깃에다가 이제 올리시고 그 주소를 제출을 하시면 될 것 같습니다. 그래서 기술 명세서는 진짜 그냥 여러분들이 손으로 써가지고 그거 그냥 사진 찍어서 업로드하셔도 되고요. 아니면은 워드 파일 피피티 뭐든 이제 문서로 만드셔도 상관없고요.

33:27 
 아니면 여러분들이 조금 더 시간을 투자를 하고 싶다고 하시면은 마크다운 같은 걸로 만들어서 리듬 위에다가 넣어두셔도 상관은 없습니다. 그래서 여러분들이 이거 이제 세 개 만들어 가지고 깃에 올려서 이제 굳이 배포까지 할 필요도 없어요. 그냥 이거 이제 만들어서 업로드를 하시면 된다라는 겁니다. 그래서 이거 기하는 다음 주에는 저희가 실습이 없을 거거든요. 에 다음 주에는 이제 ai 오케스트레이션 관련해 가지고 이제 이론 수업을 진행을 할 거라서 실습이 없기 때문에 다음 주 가 며칠이죠. 4월이죠. 다음주가 벌써 4월 5일까지 제출을 하시는 걸로 하시면 될 것 같습니다. 그래서 이거 gpt랑 같이 만든다. 아니면 ai를 활용해서 만든다고 하시면 사실 프론트 엔트도 금방 만들 거거든요.

34:25 
 그래서 제가 수업 시간에 한번 그냥 제로 베이스부터 만들어 볼 거예요. 그러면은 1시간 동안에 빠르면 다 만들 수도 있겠죠. 그래서 이제 오셔가지고, 구경을 하셔도 되고 아니면은 이제 안 오시고 이때까지 제출만 하시면 출석을 다 인정을 해드릴 거니까 그냥 어 궁금하시면 오시고 아니면은 이제 그냥 집에서 알아서 혼자 개발을 하셔도 상관은 없습니다. 네, 그러면 이해가 되셨을 거라고 바라고 궁금하신 점 있으면 저한테 메일이든 클래스룸이든 어떤 거든. 질문을 주시면 될 것 같아요. 오늘 수업은 여기서 마치는 걸로 하겠습니다.

