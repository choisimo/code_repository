server:
  port: 8080

cache:
  type: caffeine

weather:
  api:
    base-url: https://api.openweathermap.org/data/2.5
    key: ${WEATHER_API_KEY:your-default-key}
  naver:
    maps:
      geocode-url: https://naveropenapi.apigw.ntruss.com/map-geocode/v2/geocode

logging:
  level:
    com.example.weather: DEBUG
    org.springframework.cache: INFO
    org.springframework.web: INFO

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  packages-to-scan: com.example.weather.controller

# 기본 프로필 (개발 환경)
spring:
  datasource:
    url: jdbc:h2:mem:weatherdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  h2:
    console:
      enabled: true
      path: /h2-console

---
# 프로덕션 프로필
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://${DB_HOST:db}:${DB_PORT:5432}/${DB_NAME:weatherdb}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:yourpassword}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false

---
# MongoDB 프로필
spring:
  config:
    activate:
      on-profile: mongodb
  data:
    mongodb:
      host: ${MONGO_HOST:mongo}
      port: ${MONGO_PORT:27017}
      database: ${MONGO_DB:weatherdb}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration