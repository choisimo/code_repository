plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.nodove'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('springAiVersion', "1.0.0-M8")
    set('queryDslVersion', "5.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.ai:spring-ai-starter-model-openai'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// npm 빌드 태스크 정의
task npmBuild(type: Exec) {
    description = '프론트엔드 애플리케이션 빌드'
    workingDir '../frontend'
    
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
    
    // 프론트엔드 디렉토리가 존재할 때만 실행
    onlyIf {
        file("../frontend").exists()
    }
}

// 프로덕션 빌드 시 정적 프론트엔드 파일을 백엔드 리소스로 복사
tasks.register('copyFrontendResources', Copy) {
    description = '프론트엔드 빌드 결과물을 백엔드 리소스로 복사'
    dependsOn(npmBuild)
    
    from "../frontend/dist"
    into "${buildDir}/resources/main/static"
    
    // frontend 모듈이 존재하고 dist 폴더가 있을 때만 실행
    onlyIf {
        file("../frontend/dist").exists()
    }
}

// 프로덕션 빌드 전에 프론트엔드 리소스 복사
tasks.named('processResources') {
    dependsOn('copyFrontendResources')
}
